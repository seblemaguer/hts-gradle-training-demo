buildscript {
    repositories {
        jcenter()
        mavenLocal()
        maven {
            url 'https://oss.jfrog.org/artifactory/oss-snapshot-local'
        }
    }

    dependencies {
        classpath group: "com.googlecode.json-simple", name:"json-simple", version:"1.1"
        classpath group: "de.dfki.mary", name: "gradle-hts-coefficients-packing-plugin", version: "1.0-SNAPSHOT"
        classpath group: "de.dfki.mary", name: "gradle-htsvoicebuilding-plugin", version: "1.0-SNAPSHOT"
    }
}


plugins {
  id 'distribution'
  id 'maven-publish'
  id 'groovy'
//  id "com.dorongold.task-tree" version "1.3"
}

/*
//optional configuration
taskTree{
    noRepeat = true  //do not print a sub-tree in the task-tree more than once
    impliesSubProjects = true  //do not print task-tree for child projects in a multi-project
}
*/


repositories {
    jcenter()
    maven {
        url 'https://oss.jfrog.org/artifactory/oss-snapshot-local'
    }
}


dependencies {
    compile "org.codehaus.groovy:groovy-all:2.2"
}

ext {
    config_file = new File("../src/configuration/" + System.getProperty("eval_name") + ".json")
    dataset_root = "$buildDir/../../10-extraction/build/"
}


/***************************************************************************************
 ** Requires
 ***************************************************************************************/

import groovy.json.* // To load the JSON configuration file
import java.util.*


/***************************************************************************************
 ** Variable / ext definition
 ***************************************************************************************/

def slurper = new JsonSlurperClassic()
def config = slurper.parseText( config_file.text )

// Adapt pathes
DataFileFinder.project_path = new File(getClass().protectionDomain.codeSource.location.path).parent
if (config.data.project_dir) {
    DataFileFinder.project_path = config.data.project_dir
}


/***************************************************************************************
 ** Unpacking
 ***************************************************************************************/
task configuration() {
    /* We have also to adapt a little bit the coefficient paths */
    config.models.cmp.streams.each { stream ->
        stream.coeffDir = DataFileFinder.getFilePath("$dataset_root/${stream.coeffDir}")
        def tmp = []
        stream.winfiles.each { win_file ->
            tmp.add(DataFileFinder.getFilePath("$win_file"))
        }
        stream.winfiles = tmp
    }

    if (config.models.ffo) {
        config.models.ffo.streams.each { stream ->
            stream.coeffDir = DataFileFinder.getFilePath("$dataset_root/${stream.coeffDir}")
        }
    }

    // Adapt configuration paths
    config.data.list_files = DataFileFinder.getFilePath(config.data.list_files)
    config.data.mono_lab_dir = DataFileFinder.getFilePath(config.data.mono_lab_dir)
    config.data.full_lab_dir = DataFileFinder.getFilePath(config.data.full_lab_dir)
    config.data.question_file = DataFileFinder.getFilePath(config.data.question_file)
    config.data.question_file_gv = DataFileFinder.getFilePath(config.data.question_file_gv)
    
    if (config.gv.hasProperty("label_dir")) {
        config.gv.label_dir = DataFileFinder.getFilePath(config.gv.label_dir)
    }
    if (config.settings.training.kind == "dnn") {
        config.settings.dnn.qconf = DataFileFinder.getFilePath(config.settings.dnn.qconf)
    }

    ext.list_basenames = config.data.list_files
    ext.user_configuration = config
    ext.config_file = config_file

    // See for number of processes for parallel mode
    def nb_proc = 1
    if (project.gradle.startParameter.getMaxWorkerCount() != 0) {
        nb_proc = Runtime.getRuntime().availableProcessors(); // By default the number of core
        if (config.settings.nb_proc) {
            if (config.settings.nb_proc > nb_proc) {
                throw Exception("You will overload your machine, preventing stop !")
            }

            nb_proc = config.settings.nb_proc
        }
    }
    ext.nb_proc = nb_proc

    /* FIXME: see how to reintroduce skiphmm
    if (System.getProperty("skipHMMTraining"))
    {
        config.data.full_lab_dir = "$buildDir/dataset/dnn/full"
        config.data.mono_lab_dir = "$buildDir/dataset/dnn/mono"

    }
    else
    {
        config.data.full_lab_dir = "$buildDir/dataset/full"
        config.data.mono_lab_dir = "$buildDir/dataset/mono"
    }
    */

    ext.user_configuration = config
}

apply plugin: "de.dfki.mary.htspacking"
apply plugin: "de.dfki.mary.htsvoicebuilding"

// Link voice building to coefficient packing
configurationVoiceBuilding.dependsOn "pack"

// Link buid to the run method
build.dependsOn "run"
