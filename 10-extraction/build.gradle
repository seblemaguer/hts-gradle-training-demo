/***************************************************************************************
 ** Build script configuration
 ***************************************************************************************/
buildscript {
    repositories {
        mavenCentral()
        // mavenLocal()
        maven {
            url 'https://oss.jfrog.org/artifactory/oss-snapshot-local'
        }
    }

    dependencies {
        classpath group: "com.googlecode.json-simple", name:"json-simple", version:"1.1"
        classpath group: "de.dfki.mary", name: "gradle-coefficientextraction-plugin", version: "1.0-SNAPSHOT"
    }
}

plugins {
    id 'distribution'
    id 'maven-publish'
    id 'groovy'
}


dependencies {
    compile "org.codehaus.groovy:groovy-all:2.2"
}


/***************************************************************************************
 ** Requires
 ***************************************************************************************/
import groovy.json.* // To load the JSON configuration file
import java.util.ArrayList;
import java.util.StringTokenizer;

import java.io.File;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.FileReader;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;

import org.json.simple.JSONObject;
import org.json.simple.JSONArray;
import org.json.simple.parser.ParseException;
import org.json.simple.parser.JSONParser;


/***************************************************************************************
 ** Variable/ext definition
 ***************************************************************************************/
ext {
    config_file = new File("../src/configuration/" + System.getProperty("eval_name") + ".json")
}
def slurper = new JsonSlurper()
def config = slurper.parseText( config_file.text )


/***************************************************************************************
 ** Standard extraction
 ***************************************************************************************/
(new File(DataFileFinder.getFilePath(config.data.list_files))).eachLine{ basename ->
    project(":$basename") {
        buildDir = project.parent.buildDir
        apply plugin: "de.dfki.mary.coefficientextraction"

        task configuration() {

            DataFileFinder.project_path =
            new File(getClass().protectionDomain.codeSource.location.path).parent
            if (config.data.project_dir) {
                DataFileFinder.project_path = config.data.project_dir
            }

            // See for number of processes for parallel mode
            def nb_proc = 1
            if (project.gradle.startParameter.getMaxWorkerCount() != 0) {
                nb_proc = Runtime.getRuntime().availableProcessors(); // By default the number of core
                if (config.settings.nb_proc) {
                    if (config.settings.nb_proc > nb_proc) {
                        throw Exception("You will overload your machine, preventing stop !")
                    }

                    nb_proc = config.settings.nb_proc
                }
            }
            ext.nb_proc = nb_proc


            ext.wav_dir = DataFileFinder.getFilePath(config.data.wav_dir)
	    ext.kind = config.settings.extraction.kind
            ext.user_configuration = config
        }
    }
}

task extract() {
    (new File(DataFileFinder.getFilePath(config.data.list_files))).eachLine { basename ->
        dependsOn ":${basename}:extract"
    }
}
