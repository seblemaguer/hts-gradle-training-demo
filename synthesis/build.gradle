buildscript {
    repositories {
        jcenter()
        mavenLocal()
        maven {
            url 'https://oss.jfrog.org/artifactory/repo'
        }
        // maven {
        //     url "http://dl.bintray.com/slemaguer/maven"
        // }
    }

    dependencies {
        classpath group: "de.dfki.mary", name: "marytts-hts", version: "0.2.4"
        classpath group: 'de.dfki.mary', name: 'marytts-runtime', version: "5.2"
        ['en'].each { locale ->
            classpath group: 'de.dfki.mary', name: "marytts-lang-$locale", version: "5.2"
        }
    }

}

plugins {
    id 'groovy'
}

/***************************************************************************************************
 ***
 ***************************************************************************************************/

/* Marytts needed packages */
import marytts.LocalMaryInterface;
import marytts.MaryInterface;
import marytts.datatypes.MaryData;
import marytts.datatypes.MaryDataType;
import marytts.modules.MaryModule;
import marytts.util.MaryUtils;

/* MaryData needed packages */
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import org.xml.sax.InputSource ;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;

import groovy.json.* // To load the JSON configuration file
import java.util.*
import java.util.regex.Matcher
import java.util.regex.Pattern

/***************************************************************************************************
 ***
 ***************************************************************************************************/

def slurper = new JsonSlurper()
def config_file =  new File(System.getProperty("configuration"))
def config = slurper.parseText( config_file.text )

def list_file = new File(DataFileFinder.getFilePath("list_test"))


/***************************************************************************************************
 ***
 ***************************************************************************************************/

task prepareSynthesis() {

    def scp =  new File("$buildDir/synth.scp")
    outputs.files scp
    doLast {
        scp.text = ""
        list_file.eachLine { basename ->
            scp << DataFileFinder.getFilePath(config.data.full_lab_dir)
            scp << "/${basename}.lab" << "\n"
        }
    }


}

task synthesize(dependsOn:prepareSynthesis) {

    def scp = new File("$buildDir/synth.scp")

    def output_path = "$buildDir/output/normal"
    outputs.files output_path
    (new File(output_path)).mkdirs()


    doLast {
        exec {
            workingDir rootProject.projectDir
            commandLine "python3", "utils/pyhts/synthesis/synth.py", "-R", "-P",
            "-c", config_file, "-v",
            "-s", "-i", scp, "-o", output_path
        }
    }
}

task synthesizeImposedDuration(dependsOn:prepareSynthesis) {

    def scp = new File("$buildDir/synth.scp")

    def output_path = "$buildDir/output/imposed_dur"
    outputs.files output_path
    (new File(output_path)).mkdirs()


    doLast {
        exec {
            workingDir rootProject.projectDir
            commandLine "python3", "utils/pyhts/synthesis/synth.py", "-R", "-P", "-D",
            "-c", config_file,
            "-s", "-i", scp, "-o", output_path
        }
    }
}

tasks.build.dependsOn "synthesize"
tasks.build.dependsOn "synthesizeImposedDuration"
