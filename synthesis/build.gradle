buildscript {
    repositories {
        jcenter()
        mavenLocal()
        maven {
            url 'https://oss.jfrog.org/artifactory/repo'
        }
        // maven {
        //     url "http://dl.bintray.com/slemaguer/maven"
        // }
    }
}

plugins {
  id 'distribution'
  id 'maven-publish'
  id 'groovy'
}


/***************************************************************************************************
 ***
 ***************************************************************************************************/


repositories {
    maven {
        url 'http://cloudark:8081/artifactory/local'
        credentials {
            username = findProperty('cloudarkUser')
            password = findProperty('cloudarkApiKey')
        }
    }
}

configurations {
    tonguemodel
}

dependencies {
    tonguemodel group: 'org.m2ci.msp', name: 'tonguemodel', version: '0.1-SNAPSHOT', ext: 'zip'
}

/***************************************************************************************************
 ***
 ***************************************************************************************************/

import static groovy.io.FileType.FILES
import groovy.json.* // To load the JSON configuration file
import java.util.*
import java.util.regex.Matcher
import java.util.regex.Pattern

/***************************************************************************************************
 ***
 ***************************************************************************************************/
def slurper = new JsonSlurper()
def config_file =  new File("../training/build/raw/config.json")
def config = slurper.parseText( config_file.text )

def list_file = new File(DataFileFinder.getFilePath("list_test"))


/***************************************************************************************************
 ***
 ***************************************************************************************************/

task bootstrapTongueModel {
    def resourcesDir = file("$buildDir/resources")
    outputs.dir resourcesDir
    doLast {
        copy {
            from configurations.tonguemodel.collect { zipTree(it) }
            into resourcesDir
            eachFile { it.path = it.name }
        }
    }
}

task prepareSynthesis(dependsOn: bootstrapTongueModel) {

    def scp =  new File("$buildDir/synth.scp")
    outputs.files scp
    doLast {
        scp.text = ""
        list_file.eachLine { basename ->
            def rootPath = DataFileFinder.getFilePath(config.data.full_lab_dir)
            if (rootPath.startsWith("/"))
            {
                scp << rootPath
            }
            else
            {
                scp << "$rootProject.projectDir/$rootPath"
            }

            scp << "/${basename}.lab" << "\n"
        }
    }


}

task synthesize(dependsOn:prepareSynthesis) {

    def scp = new File("$buildDir/synth.scp")

    def output_path = "$buildDir/output/normal"
    outputs.files output_path
    (new File(output_path)).mkdirs()


    doLast {
        exec {
            workingDir "utils/pyhts/"
            commandLine "python3", "-u", "-B", "synth.py", "-r", "-P", "20",
            "-c", "$rootProject.projectDir/$config_file", // "-v",
            "-s", scp, output_path
        }
    }
}

task convertDurationToLab(dependsOn: synthesize) {
    new File( "$buildDir/output/normal").eachFileRecurse(FILES) {
        if(it.name.endsWith('.dur')) {
            outputs.files it.toString().replace(".dur", ".lab")
        }
    }

    doLast {
        new File( "$buildDir/output/normal").eachFileRecurse(FILES) {
            if (it.name.endsWith('.dur')) {
                def dur = it
                def lab = it.toString().replace(".dur", ".lab")
                exec {
                    commandLine "perl", "utils/duration2htk.pl", dur, lab
                }
            }
        }
    }
}

task synthesizeImposedDuration(dependsOn:prepareSynthesis) {

    def scp = new File("$buildDir/synth.scp")

    def output_path = "$buildDir/output/imposed_dur"
    outputs.files output_path
    (new File(output_path)).mkdirs()


    doLast {
        exec {
            workingDir "utils/pyhts/"
            commandLine "python3", "synth.py", "-r", "-D", "-P", "20",
            "-c", "$rootProject.projectDir/$config_file", // "-v",
            "-s", scp, output_path
        }
    }
}

task achieve(dependsOn:["convertDurationToLab", "synthesizeImposedDuration"]) {
}


/***************************************************************************************************
 *** Publishing part
 ***************************************************************************************************/

group "org.m2ci.msp"
version '0.2-SNAPSHOT'

distributions {
  main {
    contents {
        from achieve
        from "$buildDir/output"

        /* Exclude huge files */
        exclude { override ->
            override.file.path.matches('.*.sp')
        }
        exclude { override ->
            override.file.path.matches('.*.f0')
        }
        exclude { override ->
            override.file.path.matches('.*.ap')
        }
    }
  }
}

publishing {
  publications {
    main(MavenPublication) {
      artifact distZip
    }
  }
  repositories {
    maven {
      url "http://cloudark:8081/artifactory/data-snapshot-local/"
      credentials {
        username = findProperty('cloudarkUser')
        password = findProperty('cloudarkApiKey')
      }
    }
  }
}
