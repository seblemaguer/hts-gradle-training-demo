// "basic" configuration in it

apply plugin: 'groovy'
apply plugin: 'java'

group 'de.dfki.mary'
version '0.5.2-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        url 'http://cloudark:8081/artifactory/local'
        credentials {
            username = findProperty('cloudarkUser')
            password = findProperty('cloudarkApiKey')
        }
    }
}

configurations {
    acoustic
}

dependencies {
    compile "org.codehaus.groovy:groovy-all:2.2"
    acoustic group: 'org.m2ci.msp', name: 'mngu0_straight_dnn', version: '0.1-SNAPSHOT', ext:'zip'
}


ext {
    config_file = new File("../src/configuration/" + System.getProperty("eval_name") + ".json")
    dataset_root = "$buildDir/dataset/"
}

import groovy.json.* // To load the JSON configuration file
import java.util.*


def slurper = new JsonSlurper()
def config = slurper.parseText( config_file.text )

apply plugin: "de.dfki.mary.htsvoicebuilding"


task extractDataArchive {
    def datasetDir = file(dataset_root)
    outputs.files datasetDir

    doLast {
        copy {
            from configurations.acoustic.collect { zipTree(it) }
            into datasetDir
            eachFile {
                def newPath = it.relativePath.segments[1..-1].join("/")
                it.relativePath = RelativePath.parse(true, newPath)
            }
        }
    }
}

task configure(dependsOn: "extractDataArchive") {

    /* We have also to adapt a little bit the coefficient paths */
    project.user_configuration.models.cmp.streams.each { stream ->
        stream.coeffDir = "$dataset_root/${stream.coeffDir}"
    }

    if (project.user_configuration.models.ffo) {
        project.user_configuration.models.ffo.streams.each { stream ->
            stream.coeffDir = "$dataset_root/${stream.coeffDir}"
        }
    }
}

/* Generate the training observation files */
(new File(DataFileFinder.getFilePath(config.data.list_files))).eachLine{ basename ->
    project(":$basename") {
        buildDir = project.parent.buildDir
        apply plugin: "de.dfki.mary.htspacking"

        prepareEnvironment.dependsOn project.rootProject.configure
    }
}

/* Generate the test part */
(new File(DataFileFinder.getFilePath("list_test"))).eachLine{ basename ->
    project(":$basename") {
        buildDir = project.parent.buildDir
        apply plugin: "de.dfki.mary.htspacking"

        prepareEnvironment.dependsOn project.rootProject.configure
    }
}

task prepareData() {
    (new File(DataFileFinder.getFilePath(config.data.list_files))).eachLine { basename ->
        dependsOn ":${basename}:pack"
    }

    (new File(DataFileFinder.getFilePath("list_test"))).eachLine { basename ->
        dependsOn ":${basename}:pack"
    }
}

/*
task finalize(dependsOn: run) {
    doLast {
        // Copy configuration file
        copy {
            from config_file.getParent()
            into "$buildDir/raw"
            include config_file.getName()
        }

        // Creating win directory
        (new File("$buildDir/raw/win")).mkdirs()

        //
        project.user_configuration.models.cmp.streams.each { stream ->
            stream.winfiles.each { winfilename ->
                def winfile = new File(DataFileFinder.getFilePath(winfilename))
                copy {
                    from winfile.getParent()
                    into "$buildDir/raw/win"
                    include winfile.getName()
                }
            }
        }
    }
}

build.dependsOn finalize
*/
