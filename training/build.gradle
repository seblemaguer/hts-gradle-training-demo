/***************************************************************************************
 ** Requires
 ***************************************************************************************/
buildscript {
    repositories {
        mavenCentral()
        // mavenLocal()
        maven {
            url 'https://oss.jfrog.org/artifactory/repo'
        }
    }

    dependencies {
        classpath group: "com.googlecode.json-simple", name:"json-simple", version:"1.1"
        classpath group: "de.dfki.mary", name: "gradle-hts-coefficients-packing-plugin", version: "1.0-SNAPSHOT"
        classpath group: "de.dfki.mary", name: "gradle-htsvoicebuilding-plugin", version: "1.0-SNAPSHOT"
    }
}


plugins {
  id 'distribution'
  id 'maven-publish'
  id 'groovy'
  id "com.dorongold.task-tree" version "1.3"
}

//optional configuration
taskTree{
    noRepeat = true  //do not print a sub-tree in the task-tree more than once
    impliesSubProjects = true  //do not print task-tree for child projects in a multi-project
}


repositories {
    jcenter
}

configurations {
    acoustic
    labels
}


dependencies {
    compile "org.codehaus.groovy:groovy-all:2.2"
}

ext {
    config_file = new File("../src/configuration/" + System.getProperty("eval_name") + ".json")
    coeff_dataset_root = "$buildDir/../../00-extraction"
}


/***************************************************************************************
 ** Requires
 ***************************************************************************************/

import groovy.json.* // To load the JSON configuration file
import java.util.*


/***************************************************************************************
 ** Variable / ext definition
 ***************************************************************************************/

def slurper = new JsonSlurper()
def config = slurper.parseText( config_file.text )

// Adapt pathes
DataFileFinder.project_path = new File(getClass().protectionDomain.codeSource.location.path).parent
if (config.data.project_dir) {
    DataFileFinder.project_path = config.data.project_dir
}



/***************************************************************************************
 ** Unpacking
 ***************************************************************************************/
task extractDataArchive {
    def datasetDir = file(dataset_root)
    if (System.getProperty("skipHMMTraining"))
    {
        datasetDir = file(dataset_root + "dnn")
    }
    outputs.files datasetDir

    doLast {
        copy {
            from configurations.acoustic.collect { zipTree(it) }
            into datasetDir
            eachFile {
                def newPath = it.relativePath.segments[1..-1].join("/")
                it.relativePath = RelativePath.parse(true, newPath)
            }
        }


        copy {
            from configurations.labels.collect { zipTree(it) }
            into datasetDir
            eachFile {
                def newPath = it.relativePath.segments[1..-1].join("/")
                it.relativePath = RelativePath.parse(true, newPath)
            }
        }
    }
}




/***************************************************************************************
 ** Unpacking
 ***************************************************************************************/
task configure(dependsOn: "extractDataArchive") {
    /* We have also to adapt a little bit the coefficient paths */
    config.models.cmp.streams.each { stream ->
        stream.coeffDir = "$dataset_root/${stream.coeffDir}"
    }

    if (config.models.ffo) {
        config.models.ffo.streams.each { stream ->
            stream.coeffDir = "$dataset_root/${stream.coeffDir}"
        }
    }
}

/* Generate the training observation files */
(new File(DataFileFinder.getFilePath(config.data.list_files))).eachLine{ basename ->
    project(":$basename") {
        buildDir = project.parent.buildDir
        apply plugin: "de.dfki.mary.htspacking"

        task configurationPacking(dependsOn: ":configure") {
            ext.user_configuration = config
            ext.config_file = config_file
        }
    }
}

task configurationVoiceBuilding() {
    dependsOn "extractDataArchive"

    (new File(DataFileFinder.getFilePath(config.data.list_files))).eachLine { basename ->
        dependsOn ":${basename}:pack"
    }


    // See for number of processes for parallel mode
    def nb_proc = 1
    if (project.gradle.startParameter.getMaxWorkerCount() != 0) {
        nb_proc = Runtime.getRuntime().availableProcessors(); // By default the number of core
        if (config.settings.nb_proc) {
            if (config.settings.nb_proc > nb_proc) {
                throw Exception("You will overload your machine, preventing stop !")
            }

            nb_proc = config.settings.nb_proc
        }
    }
    ext.nb_proc = nb_proc

    if (System.getProperty("skipHMMTraining"))
    {
        config.data.full_lab_dir = "$buildDir/dataset/dnn/full"
        config.data.mono_lab_dir = "$buildDir/dataset/dnn/mono"

    }
    else
    {
        config.data.full_lab_dir = "$buildDir/dataset/full"
        config.data.mono_lab_dir = "$buildDir/dataset/mono"
    }

    ext.user_configuration = config
}


apply plugin: "de.dfki.mary.htsvoicebuilding"


task finalize(dependsOn: "run") {
}


/***************************************************************************************************
 *** Publishing part
 ***************************************************************************************************/
