/***************************************************************************************
 ** Build script configuration
 ***************************************************************************************/
buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven {
            url 'https://oss.jfrog.org/artifactory/oss-snapshot-local'
        }
        maven {
            url 'https://oss.jfrog.org/artifactory/oss-release-local'
        }
    }

    dependencies {
        classpath group: "com.googlecode.json-simple", name:"json-simple", version:"1.1"

        classpath group: "de.dfki.mary", name: "marytts-common", version: "6.0.1-SNAPSHOT"

        // Label part
        classpath group: "de.dfki.mary", name: "gradle-marytts-dict-extraction-en", version: "0.1-SNAPSHOT"
        classpath group: "de.dfki.mary", name: "gradle-marytts-kaldi-mfa-plugin", version: "0.4-SNAPSHOT"
        classpath group: "de.dfki.mary", name: "gradle-marytts-align-plugin", version: "0.1-SNAPSHOT"

        // Acoustic parameters part
        classpath group: "de.dfki.mary", name: "gradle-coefficientextraction-plugin", version: "1.0-SNAPSHOT"

        // HTS specificities
        classpath group: "de.dfki.mary", name: "gradle-hts-coefficients-packing-plugin", version: "1.0-SNAPSHOT"
        classpath group: "de.dfki.mary", name: "gradle-htsvoicebuilding-plugin", version: "2.3.1.1-SNAPSHOT"
    }
}


plugins {
    id 'distribution'
    id 'maven-publish'
    id 'groovy'
    id "com.dorongold.task-tree" version "1.3.1"
}

//optional configuration
taskTree{
    noRepeat = true  //do not print a sub-tree in the task-tree more than once
    impliesSubProjects = true  //do not print task-tree for child projects in a multi-project
}

configurations {
    data
}

repositories {
    ivy {
        url 'http://festvox.org/'
        layout 'pattern', {
            artifact '[classifier]/[classifier]/packed/[module]-[revision].[ext]'
        }
    }
}

dependencies {
    // http://festvox.org/examples/cmu_time_awb_ldom/packed/cmu_time_awb.tar.bz2
    // http://festvox.org/cmu_arctic/cmu_arctic/packed/cmu_us_slt_arctic-0.95-release.tar.bz2
    data group: 'org.festvox', name: 'cmu_us_slt_arctic', version: '0.95-release', classifier: 'cmu_arctic', ext: 'tar.bz2'
}




// /***************************************************************************************
//  ** Helper classes
//  ***************************************************************************************/
class ConvertTextPrompts extends DefaultTask {

    @InputFile
    final RegularFileProperty srcFile = newInputFile()

    @OutputDirectory
    final DirectoryProperty destDir = newOutputDirectory()

    @TaskAction
    void convert() {
        srcFile.get().asFile.eachLine { line ->
            def fields = line.split()
            def prompt = fields[1]
            def text = fields[2..-2].join(' ').replaceAll('"', '')
            destDir.file("${prompt}.txt").get().asFile.text = text
        }
    }
}


class GenerateFileList extends DefaultTask {
    @InputDirectory
    final DirectoryProperty srcDir = newInputDirectory()

    @OutputFile
    final RegularFileProperty destFile = newOutputFile()

    @TaskAction
    void generate() {
        def list = project.fileTree(srcDir.get()).filter { it.isFile() }.files.name
        for (int i=0; i<list.size; i++) {
            list[i] = list[i].replace(".lab", "")
        }
        destFile.get().asFile.text = list.join("\n")
    }
}


/***************************************************************************************
 ** Requires
 ***************************************************************************************/
import groovy.json.* // To load the JSON configuration file


if (System.getProperty("eval_name")) {

    /***************************************************************************************
     ** Data part
     ***************************************************************************************/
    task processDataDependencies(type: Copy) {
        from configurations.data.collect {
            tarTree(it)
        }
        into "$buildDir/unpacked"
        include '**/*.wav', '**/*.lab', '**/etc/*.data'
        includeEmptyDirs = false
    }

    task convertTextPrompts(type: ConvertTextPrompts) {
        dependsOn processDataDependencies
        srcFile = file("$buildDir/unpacked/cmu_us_slt_arctic/etc/arctic.data")
        destDir = file("$buildDir/text")
    }

    /***************************************************************************************
     ** NLP part
     ***************************************************************************************/
    apply plugin: 'marytts.dict-extraction-en'
    apply plugin: "de.dfki.mary.voicebuilding.marytts-kaldi-mfa"
    apply plugin: "marytts.align"


    // Alignment
    generateDictionary.dependsOn "convertTextPrompts"
    extractMFALab.dependsOn "convertTextPrompts"
    prepareForcedAlignment.wavDir = file("$buildDir/unpacked/cmu_us_slt_arctic/wav")
    prepareForcedAlignment.dictFile = generateDictionary.dictFile

    // Generate feature
    addDurationToUtt.dependsOn "runForcedAlignment"
    addDurationToUtt.srcTextGridDir = file("$buildDir/TextGrid/forcedAlignment") // runForcedAlignment.destDir (FIXME: forcedAlignment subdir !)
    // addDurationToUtt.srcUttDir = file("$buildDir/utt_json")
    addDurationToUtt.srcUttDir = generateDictionary.destDir

    // Generate file list based on generated labels!
    task generateFileList(type: GenerateFileList) {
        srcDir = generateHTSLabels.fullLabDir
        destFile = file("$buildDir/list_training")
    }

    // /***************************************************************************************
    //  ** Acoustic / Training part
    //  ***************************************************************************************/
    // ext {
    //     config_file = new File("src/configuration/" + System.getProperty("eval_name") + ".json")
    // }
    // def slurper = new JsonSlurperClassic()
    // def config = slurper.parseText( config_file.text )


    // task configuration() {

    //     // Prepare data file finder helper
    //     DataFileFinder.project_path = new File(getClass().protectionDomain.codeSource.location.path).parent
    //     if (config.data.project_dir) {
    //         DataFileFinder.project_path = config.data.project_dir
    //     }

    //     // Deal with lists
    //     config.data.list_files = generateFileList.destFile.getAsFile().get()
    //     ext.list_basenames = generateFileList.destFile.getAsFile().get()

    //     // Data extraction directory
    //     ext.wav_dir = file("$buildDir/unpacked/cmu_us_slt_arctic/wav")
    //     ext.kind = config.settings.extraction.kind

    //     // Extraction information
    //     config.models.cmp.streams.each { stream ->
    //         stream.coeffDir = DataFileFinder.getFilePath("$buildDir/${stream.kind}")
    //         def tmp = []
    //         stream.winfiles.each { win_file ->
    //             tmp.add(DataFileFinder.getFilePath("$win_file"))
    //         }
    //         stream.winfiles = tmp
    //     }

    //     // // FIXME: is it really useful?
    //     // if (config.models.ffo) {
    //     //     config.models.ffo.streams.each { stream ->
    //     //         stream.coeffDir = DataFileFinder.getFilePath("$buildDir/${stream.kind}")
    //     //     }
    //     // }

    //     // HTS needed question files
    //     config.data.question_file    = DataFileFinder.getFilePath(config.data.question_file)
    //     config.data.question_file_gv = DataFileFinder.getFilePath(config.data.question_file_gv)

    //     // Label files (FIXME: removed soon)
    //     config.data.mono_lab_dir = generateHTSLabels.monoLabDir.getAsFile().get()
    //     config.data.full_lab_dir = generateHTSLabels.fullLabDir.getAsFile().get()
    //     if (config.gv.hasProperty("label_dir")) {
    //         config.gv.label_dir = DataFileFinder.getFilePath(config.gv.label_dir)
    //     }

    //     // DNN configuration part
    //     if (config.settings.training.kind == "dnn") {
    //         config.settings.dnn.qconf = DataFileFinder.getFilePath(config.settings.dnn.qconf)
    //     } else {
    //         config.settings.dnn = [:]
    //         config.settings.dnn.qconf = null
    //     }

    //     ext.user_configuration = config
    // }


    // apply plugin: "de.dfki.mary.coefficientextraction"
    // apply plugin: "de.dfki.mary.htspacking"
    // apply plugin: "de.dfki.mary.htsvoicebuilding"


    // // generateCMP.dependsOn "extract"
    // // if (config.models.ffo) {
    // //     generateFFO.dependsOn "extract"
    // // }

    // // Link voice building to coefficient packing
    // generateSCPFile.data_directory = generateCMP.cmp_directory

    // /***************************************************************************************
    //  ** Entry point
    //  ***************************************************************************************/
    // build.dependsOn "train"
}
