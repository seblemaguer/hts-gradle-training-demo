buildscript {
    repositories {
        jcenter()
        mavenLocal()
        maven {
            url 'https://oss.jfrog.org/artifactory/repo'
        }
        // maven {
        //     url "http://dl.bintray.com/slemaguer/maven"
        // }
    }
}

plugins {
  id 'distribution'
  id 'maven-publish'
  id 'groovy'
}


/***************************************************************************************************
 ***
 ***************************************************************************************************/


repositories {
    maven {
        url 'http://cloudark:8081/artifactory/local'
        credentials {
            username = findProperty('cloudarkUser')
            password = findProperty('cloudarkApiKey')
        }
    }
}

configurations {
    tonguemodel
}

dependencies {
    tonguemodel group: 'org.m2ci.msp', name: 'tonguemodel', version: '0.1-SNAPSHOT', ext: 'zip'
}



ext {
    utilsDir = file("$rootDir/utils")
    config_file = new File("../src/configuration/" + System.getProperty("eval_name") + ".json")
    dataset_root = "$buildDir/dataset/"

    // FIXME: hardcoded part
    labelsName = "mngu0_labels"
    dataVersion = '0.2-SNAPSHOT'
}

configurations {
    acoustic
    ema
    labels
}

dependencies {
    // labels group: 'org.m2ci.msp', name: labelsName, version: dataVersion, ext: 'zip'
    acoustic group: 'org.m2ci.msp', name: System.getProperty("eval_name"), version: '0.1-SNAPSHOT', ext:'zip'
    ema group: 'org.m2ci.msp', name: "mngu0_ema_tongue", version: '0.1-SNAPSHOT', ext:'zip'
}


/***************************************************************************************************
 ***
 ***************************************************************************************************/

import static groovy.io.FileType.FILES
import groovy.json.* // To load the JSON configuration file
import java.util.*
import java.util.regex.Matcher
import java.util.regex.Pattern

/***************************************************************************************************
 ***
 ***************************************************************************************************/

// Specific to this architecture (FIXME: maybe generalize it ?)
def eval_name = System.getProperty("eval_name")
def model_file = "${rootProject.projectDir}/../20-training/build/raw/"

def slurper = new JsonSlurper()
def config_file =  new File("$model_file/config.json")
def config = slurper.parseText( config_file.text )


def list_file = file(System.getProperty("list_file"))
def full_lab_dir = System.getProperty("full_lab_dir")
def mono_lab_dir = System.getProperty("mono_lab_dir")

logging.captureStandardOutput LogLevel.INFO
logging.captureStandardError LogLevel.ERROR


/*******************************************************************************************
 ** Utils
 *******************************************************************************************/

task extractDataArchive {
    def datasetDir = file(dataset_root)
    outputs.files datasetDir

    doLast {
        copy {
            from configurations.labels.collect { zipTree(it) }
            into datasetDir
            eachFile {
                def newPath = it.relativePath.segments[1..-1].join("/")
                it.relativePath = RelativePath.parse(true, newPath)
            }
        }

        copy {
            from configurations.acoustic.collect { zipTree(it) }
            into datasetDir
            eachFile {
                def newPath = it.relativePath.segments[1..-1].join("/")
                it.relativePath = RelativePath.parse(true, newPath)
            }
        }


        copy {
            from configurations.ema.collect { zipTree(it) }
            into datasetDir
            eachFile {
                def newPath = it.relativePath.segments[1..-1].join("/")
                it.relativePath = RelativePath.parse(true, newPath)
            }
        }
    }
}


task configuration() {
    // See for number of processes for parallel mode
    def nb_proc = 1
    if (project.gradle.startParameter.getMaxWorkerCount() != 0) {
        nb_proc = Runtime.getRuntime().availableProcessors(); // By default the number of core
        if (config.settings.nb_proc) {
            if (config.settings.nb_proc > nb_proc) {
                throw Exception("You will overload your machine, preventing stop !")
            }

            nb_proc = config.settings.nb_proc
        }
    }
    ext.nb_proc = nb_proc

    ext.list_basenames = list_file as String[]
    ext.lab_dir = mono_lab_dir

    // Now let's proceed per stream
    ext.channel_labels = ["T3", "T2", "T1", "ref", "jaw", "upperlip", "lowerlip"]
    ext.channels = [0, 8, 16, 24, 32, 40, 48]
    ext.reference_dir = ["dur": full_lab_dir]
    ext.synthesize_dir = ["dur": "../30-synthesis/build/output/normal"]

    config.models.cmp.streams.each { stream ->
        if (stream.kind == "mgc")
        {
            ext.reference_dir["mgc"] = "../10-extraction/build/mgc"
            ext.synthesize_dir["mgc"] = "../30-synthesis/build/output/imposed_dur"
            ext.mgc_dim = 50
        }
        else if (stream.kind == "lf0")
        {
            ext.reference_dir["lf0"] = "../10-extraction/build/lf0"
            ext.synthesize_dir["lf0"] = "../30-synthesis/build/output/imposed_dur"
        }
        else if (stream.kind == "ema")
        {
            ext.reference_dir["ema"] = "../10-extraction/build/ema"
            ext.synthesize_dir["ema"] = "../30-synthesis/build/output/imposed_dur"

            if (stream.containsKey("parameters") &&
                stream.parameters.containsKey("channel_labels"))
            {
                ext.channel_labels = stream.parameters.channel_labels
                ext.channels = stream.parameters.channels
            }
        }
        else if (stream.kind == "weight")
        {
            ext.reference_dir["ema"] = "../10-extraction/build/ema"
            ext.synthesize_dir["ema"] = "../30-synthesis/build/output/imposed_dur"


            ext.reference_dir["weight"] = "../10-extraction/build/weight"
            ext.synthesize_dir["weight"] = "../30-synthesis/build/output/imposed_dur"

            ext.weight_dim = stream.order + 1

            if (stream.containsKey("parameters") &&
                stream.parameters.containsKey("channel_labels"))
            {
                ext.channel_labels = stream.parameters.channel_labels
                ext.channels = stream.parameters.channels
            }
        }
    }

    ext.id_expe = eval_name
}

apply plugin: "de.dfki.mary.ttsanalysis"
apply plugin: "de.dfki.mary.emaevaluation"

task generateGlobalReport() {
    dependsOn "configuration"
    dependsOn "generateAcousticReport"

    if (configuration.reference_dir.containsKey("ema")) {
        dependsOn "generateEMAReport"
    }

    def output_f = new File("$buildDir/output/global_report.csv")

    // FIXME: ignore the output one and revalidate this one
    //outputs.files output_f

    doLast {

        output_f.text = "#id\tmean\tstd\tconfint\n"
        generateAcousticReport.output_f.eachLine { line ->
            if (!line.startsWith("#"))
            {
                output_f << line << "\n"
            }
        }

        if (configuration.reference_dir.containsKey("ema")) {
            generateEMAReport.output_f.eachLine { line ->
                if (!line.startsWith("#"))
                {
                    output_f << line << "\n"
                }
            }
        }
    }
}

/***************************************************************************************************
 *** Publishing part
 ***************************************************************************************************/

group "org.m2ci.msp"
version '0.2-SNAPSHOT'

distributions {
    main {
        contents {
            from generateGlobalReport
            from "$buildDir/output"
        }
    }
}

publishing {
    publications {
        main(MavenPublication) {
            artifact distZip
        }
    }
    repositories {
        maven {
            url "http://cloudark:8081/artifactory/data-snapshot-local/"
            credentials {
                username = findProperty('cloudarkUser')
                password = findProperty('cloudarkApiKey')
            }
        }
    }
}
